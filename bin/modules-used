#!/usr/bin/env perl

use utf8;
use 5.008003;

use strict;
use warnings;

use version; our $VERSION = qv('v1.2.0');

use English qw< -no_match_vars >;
use Readonly;

use File::Next ();

use Module::Used qw< modules_used_in_files >;

Readonly my %IGNORED_DIRECTORIES =>
    map { $_ => 1 }
    qw<
        .bzr
        .cdv
        ~.dep
        ~.dot
        ~.nib
        ~.plst
        .git
        .hg
        .pc
        .svn
        blib
        CVS
        RCS
        SCCS
        _darcs
        _sgbak
        autom4te.cache
        cover_db
        _build
    >;

return 1 if caller;
exit run(@ARGV);

sub run {
    my (@argv) = @_;

    my @modules = modules_used_in_files( _get_files(@argv) );
    foreach my $module ( sort { lc $a cmp lc $b } @modules ) {
        print "$module\n";
    } # end foreach

    return 0;
} # end run()


sub _get_files {
    my @paths = @_;

    my $iterator = File::Next::files(
        {
            file_filter => sub {
                    not _is_ignored_file($_)
                and _is_perl_file($File::Next::name)
            },
            descend_filter => sub { not _is_ignored_directory($_) },
        },
        @paths,
    );

    my @files;
    while ( defined ( my $file = $iterator->() ) ) {
        push @files, $file;
    }

    return @files;
}

sub _is_ignored_directory {
    my ($directory) = @_;

    return 1 if $IGNORED_DIRECTORIES{$directory};
    return 0;
}

sub _is_ignored_file {
    my ($file) = @_;

    return 1 if $file =~ qr< (?: [.] bak | ~ ) \z >xms;
    return 1 if $file =~ qr< [#] .+ [#] \z       >xms;
    return 1 if $file =~ qr< [._] .* \.swp \z    >xms;
    return $file =~ qr< core [.] \d+ \z      >xms;
}

sub _is_perl_file {
    my ($file) = @_;

    return 1 if $file =~ m/ [.] (?: p (?: l x? | m ) | t | PL ) \z /xms; ## no critic (ProhibitSingleCharAlternation)
    return 0 if index($file, q<.>) >= 0;
    return _is_perl_program($file);
}

sub _is_perl_program {
    my ($file) = @_;

    if (open my $handle, '<', $file) {
        my $first_line = <$handle>;

        if (not close $handle) {
            die qq<Could not close "$file": $OS_ERROR\n>;
        }

        return $first_line =~ m< \A [#]! .* \bperl >xms;
    }

    die qq<Could not open "$file": $OS_ERROR\n>;
}

__END__

=encoding utf8

=for stopwords

=head1 NAME

modules-used - List modules used by a set of Perl source files without running them.


=head1 VERSION

This document describes modules-used version 1.2.0.


=head1 USAGE

    modules-used source-file [...]


=head1 DESCRIPTION

Dumps a list of modules used by some Perl code.  Modules are found statically
based upon C<use> and C<require> statements.  If use of the L<base> or
L<parent> is found, both that module and the referenced ones will be emitted.

Dynamically loaded modules will not be found.


=head1 REQUIRED ARGUMENTS

=over

=item · source-file [...]

A list of files to search.


=back


=head1 OPTIONS

None.


=head1 DIAGNOSTICS

=over

=item "%s" does not exist.

Cannot find the file.


=item "%s" is not readable.

Cannot read the file.


=item "%s" is a directory.

The "file" was actually a directory.


=item Could not parse "%s".

L<PPI> could not interpret the file as a Perl document.


=back


=head1 CONFIGURATION AND ENVIRONMENT

None.


=head1 DEPENDENCIES

L<Module::Used>


=head1 INCOMPATIBILITIES

None known.


=head1 BUGS AND LIMITATIONS

None reported.

Please report any bugs or feature requests to
C<bug-module-used@rt.cpan.org>, or through the web
interface at L<http://rt.cpan.org>.


=head1 SEE ALSO

L<Devel::Loaded>
L<Module::Extract::Namespaces>
L<Module::ScanDeps>
L<Module::PrintUsed>


=head1 AUTHOR

Elliot Shank C<< <perl@galumph.com> >>


=head1 LICENSE AND COPYRIGHT

Copyright ©2008, Elliot Shank C<< <perl@galumph.com> >>. All
rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself. See L<perlartistic>.


=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENSE, BE LIABLE
TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

=cut

# setup vim: set filetype=perl tabstop=4 softtabstop=4 expandtab :
# setup vim: set shiftwidth=4 shiftround textwidth=78 nowrap autoindent :
# setup vim: set foldmethod=indent foldlevel=0 :
